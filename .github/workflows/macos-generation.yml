name: macOS image generation
on:
  workflow_call:
    inputs:
      image_label:
        type: string
        description: macOS codename
        required: true
      base_image_name:
        type: string
        description: Base clean image
        required: true
      virtualMachineName:
        type: string
        description: Name for VM in vSphere
        required: true
      template_path:
        type: string
        description: Packer template path
        required: true
      target_datastore:
        type: string
        description: Image datastore
        required: true
      custom_repo:
        type: string
        description: Custom repo to checkout
        required: false
      custom_repo_hash:
        type: string
        description: Custom repo hash
        required: false

env:
  KEYVAULT: imagegeneration
  ESXI_CLUSTER: mcv2-build-unstable
  VCENTER_DATACENTER: imagegen
  OUTPUT_FOLDER: mms-output
  BUILD_DATASTORE: ds-image

defaults:
  run:
    shell: pwsh

jobs:
  build:
    runs-on: maccloudv2
    timeout-minutes: 1200
    steps:
    #- uses: actions/checkout@v3
    - name: Checkout repository
      if: ${{ (inputs.custom_repo == '' && inputs.custom_repo_hash == '') || github.event_name != 'pull_request_target'  }}
      uses: actions/checkout@v3
      with:
        repository: actions/runner-images

    - name: Checkout PR
      if: ${{ github.event_name == 'pull_request_target' && github.event.action == 'labeled' }}
      uses: actions/checkout@v3
      with:
        ref: ${{ github.event.pull_request.head.sha }}

    - name: Checkout custom repository
      if: ${{ inputs.custom_repo != '' && inputs.custom_repo_hash != ''  }}
      uses: actions/checkout@v3
      with:
        repository: '${{ inputs.custom_repo }}'
        ref: '${{ inputs.custom_repo_hash }}'

    - uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Validate contributor permissions
      if: ${{ github.event_name == 'pull_request_target' }}
      run: |
        $GitHubFeed = az keyvault secret show -n "github-feed-token" --vault-name "${{ env.KEYVAULT }}" --query value -o tsv
        [string]$contributorAllowList = "${{ vars.CONTRIBUTOR_ALLOWLIST }}"
        ./images.CI/macos/validate-contributor.ps1 `
          -RepositoryName ${{ github.repository }} `
          -AccessToken $GitHubFeed `
          -SourceBranch "refs/pull/${{ github.event.pull_request.number }}/merge" `
          -ContributorAllowList $contributorAllowList

    - name: Select datastore
      run: |
        $VIUserName = az keyvault secret show -n "vcenter-username-v2" --vault-name "${{ env.KEYVAULT }}" --query value -o tsv
        $VIPassword = az keyvault secret show -n "vcenter-password-v2" --vault-name "${{ env.KEYVAULT }}" --query value -o tsv

        ./images.CI/macos/select-datastore.ps1 `
          -VMName "${{ inputs.virtualMachineName }}" `
          -VIServer ${{ secrets.VISERVER_V2 }} `
          -VIUserName $VIUserName `
          -VIPassword $VIPassword `
          -Cluster ${{ env.ESXI_CLUSTER }}

    - name: Build VM
      run: |
        $VIUserName = az keyvault secret show -n "vcenter-username-v2" --vault-name "${{ env.KEYVAULT }}" --query value -o tsv
        $VIPassword = az keyvault secret show -n "vcenter-password-v2" --vault-name "${{ env.KEYVAULT }}" --query value -o tsv
        $XcodeUser = az keyvault secret show -n "xcode-installation-user" --vault-name "${{ env.KEYVAULT }}" --query value -o tsv
        $XcodePassword =  az keyvault secret show -n "xcode-installation-password" --vault-name "${{ env.KEYVAULT }}" --query value -o tsv

        $SensitiveData = @(
          'IP address:',
          'Using ssh communicator to connect:'
        )
         packer build -on-error=abort `
        -var="vcenter_server=${{ secrets.VISERVER_V2 }}" `
        -var="vcenter_username=$VIUserName" `
        -var="vcenter_password=$VIPassword" `
        -var="vcenter_datacenter=${{ env.VCENTER_DATACENTER }}" `
        -var="cluster_or_esxi_host=${{ env.ESXI_CLUSTER }}" `
        -var="esxi_datastore=${{ env.BUILD_DATASTORE }}" `
        -var="output_folder=${{ env.OUTPUT_FOLDER }}" `
        -var="vm_username=${{ secrets.VM_USERNAME }}" `
        -var="vm_password=${{ secrets.VM_PASSWORD }}" `
        -var="github_api_pat=${{ secrets.GH_FEED_TOKEN }}" `
        -var="build_id=${{ inputs.virtualMachineName }}" `
        -var="baseimage_name=${{ inputs.base_image_name }}" `
        -var="xcode_install_user=$XcodeUser" `
        -var="xcode_install_password=$XcodePassword" `
        -color=false `
        ${{ inputs.template_path }} `
        | Where-Object {
            #Filter sensitive data from Packer logs
            $currentString = $_
            $sensitiveString = $SensitiveData | Where-Object { $currentString -match $_ }
            $sensitiveString -eq $null
        }
      working-directory: images/macos
      env:
        PACKER_LOG: 1
        PACKER_LOG_PATH: ${{ runner.temp }}/packer-log.txt

    - name: Prepare artifact
      shell: bash
      run: |
        echo "Preparing artifact directory"
        mkdir -p ${{ runner.temp }}/artifacts
        mkdir -p ${{ runner.temp }}/testResults

        echo "Copy image output files"
        cp -R "images/image-output/software-report/." "${{ runner.temp }}/artifacts"

        echo "Copy test results"
        cp -R "images/image-output/tests/." "${{ runner.temp }}/testResults"
        ls ${{ runner.temp }}/testResults

        echo "Put VM name to 'VM_Done_Name' file"
        echo "${{ inputs.virtualMachineName }}" > "${{ runner.temp }}/artifacts/VM_Done_Name"

    - name: Print markdown software report
      shell: bash
      run: |
        cat "${{ runner.temp }}/artifacts/systeminfo.md"

    - name: Print json software report
      shell: bash
      run: |
        cat "${{ runner.temp }}/artifacts/systeminfo.json"

    - name: Publish Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: Built_VM_Artifacts
        path: ${{ runner.temp }}/artifacts/

    - name: Print provisioners duration
      run: |
        ./images.CI/measure-provisioners-duration.ps1 `
          -PackerLogPath "${{ runner.temp }}/packer-log.txt" `
          -PrintTopNLongest 25

    - name: Move vm to cold storage and clear datastore tag
      run: |
        $VIUserName = az keyvault secret show -n "vcenter-username-v2" --vault-name "${{ env.KEYVAULT }}" --query value -o tsv
        $VIPassword = az keyvault secret show -n "vcenter-password-v2" --vault-name "${{ env.KEYVAULT }}" --query value -o tsv
        $cpuCount = 3
        $coresPerSocketCount = 3
        $memory = 14336

        ./images.CI/macos/move-vm.ps1 `
          -VMName "${{ inputs.virtualMachineName }}" `
          -TargetDataStore "${{ inputs.target_datastore }}" `
          -VIServer "${{ secrets.VISERVER_V2 }}" `
          -VIUserName "$VIUserName" `
          -VIPassword "$VIPassword" `
          -CpuCount "$cpuCount" `
          -CoresPerSocketCount "$coresPerSocketCount" `
          -Memory "$memory"

    - name: Destroy VM (if build canceled only)
      if: ${{ cancelled() }}
      run: |
        $VIUserName = az keyvault secret show -n "vcenter-username-v2" --vault-name "${{ env.KEYVAULT }}" --query value -o tsv
        $VIPassword = az keyvault secret show -n "vcenter-password-v2" --vault-name "${{ env.KEYVAULT }}" --query value -o tsv

        ./images.CI/macos/destroy-vm.ps1 `
          -VMName "${{ inputs.virtualMachineName }}" `
          -VIServer "${{ secrets.VISERVER_V2 }}" `
          -VIUserName "$VIUserName" `
          -VIPassword "$VIPassword"
